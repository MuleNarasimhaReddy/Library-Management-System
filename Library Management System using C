#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Constants
#define MAX_BOOKS 1000
#define TITLE_LENGTH 100
#define AUTHOR_LENGTH 50
#define FILE_NAME "library.dat"

// Book structure
typedef struct {
    int id;
    char title[TITLE_LENGTH];
    char author[AUTHOR_LENGTH];
    int isBorrowed;
} Book;

// Global Variables
Book library[MAX_BOOKS];
int bookCount = 0;

// Function Prototypes
void loadBooks();
void saveBooks();
void addBook();
void viewBooks();
void searchBooks();
void borrowBook();
void returnBook();
void deleteBook();
void displayBook(Book book);
int findBookById(int id);

// Main Menu
int main() {
    loadBooks(); // Load books from file

    int choice;
    while (1) {
        printf("\n====== Library Management System ======\n");
        printf("1. Add Book\n");
        printf("2. View Books\n");
        printf("3. Search Books\n");
        printf("4. Borrow Book\n");
        printf("5. Return Book\n");
        printf("6. Delete Book\n");
        printf("7. Save & Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // Clear newline buffer

        switch (choice) {
            case 1: addBook(); break;
            case 2: viewBooks(); break;
            case 3: searchBooks(); break;
            case 4: borrowBook(); break;
            case 5: returnBook(); break;
            case 6: deleteBook(); break;
            case 7: saveBooks(); printf("Data saved. Exiting...\n"); exit(0);
            default: printf("Invalid choice. Please try again.\n");
        }
    }
}

// Load books from file
void loadBooks() {
    FILE *file = fopen(FILE_NAME, "rb");
    if (!file) {
        printf("No previous data found. Starting fresh.\n");
        return;
    }
    fread(&bookCount, sizeof(int), 1, file);
    fread(library, sizeof(Book), bookCount, file);
    fclose(file);
    printf("Library data loaded successfully.\n");
}

// Save books to file
void saveBooks() {
    FILE *file = fopen(FILE_NAME, "wb");
    if (!file) {
        printf("Error saving data!\n");
        return;
    }
    fwrite(&bookCount, sizeof(int), 1, file);
    fwrite(library, sizeof(Book), bookCount, file);
    fclose(file);
    printf("Library data saved successfully.\n");
}

// Add a new book
void addBook() {
    if (bookCount >= MAX_BOOKS) {
        printf("Library is full!\n");
        return;
    }
    Book newBook;
    newBook.id = bookCount + 1;
    printf("Enter book title: ");
    fgets(newBook.title, TITLE_LENGTH, stdin);
    newBook.title[strcspn(newBook.title, "\n")] = '\0';
    printf("Enter author name: ");
    fgets(newBook.author, AUTHOR_LENGTH, stdin);
    newBook.author[strcspn(newBook.author, "\n")] = '\0';
    newBook.isBorrowed = 0;

    library[bookCount++] = newBook;
    printf("Book added successfully!\n");
}

// View all books
void viewBooks() {
    if (bookCount == 0) {
        printf("No books available in the library.\n");
        return;
    }
    printf("\n%-5s %-30s %-20s %-10s\n", "ID", "Title", "Author", "Status");
    printf("---------------------------------------------------------------\n");
    for (int i = 0; i < bookCount; i++) {
        displayBook(library[i]);
    }
}

// Display a single book
void displayBook(Book book) {
    printf("%-5d %-30s %-20s %-10s\n",
           book.id,
           book.title,
           book.author,
           book.isBorrowed ? "Borrowed" : "Available");
}

// Search books by title or author
void searchBooks() {
    char query[TITLE_LENGTH];
    printf("Enter book title or author to search: ");
    fgets(query, TITLE_LENGTH, stdin);
    query[strcspn(query, "\n")] = '\0';

    printf("\n%-5s %-30s %-20s %-10s\n", "ID", "Title", "Author", "Status");
    printf("---------------------------------------------------------------\n");
    int found = 0;
    for (int i = 0; i < bookCount; i++) {
        if (strstr(library[i].title, query) || strstr(library[i].author, query)) {
            displayBook(library[i]);
            found = 1;
        }
    }
    if (!found) {
        printf("No matching books found.\n");
    }
}

// Borrow a book
void borrowBook() {
    int id;
    printf("Enter Book ID to borrow: ");
    scanf("%d", &id);
    int index = findBookById(id);

    if (index == -1) {
        printf("Book not found.\n");
        return;
    }
    if (library[index].isBorrowed) {
        printf("Book is already borrowed.\n");
    } else {
        library[index].isBorrowed = 1;
        printf("Book borrowed successfully!\n");
    }
}

// Return a book
void returnBook() {
    int id;
    printf("Enter Book ID to return: ");
    scanf("%d", &id);
    int index = findBookById(id);

    if (index == -1) {
        printf("Book not found.\n");
        return;
    }
    if (!library[index].isBorrowed) {
        printf("Book is already available.\n");
    } else {
        library[index].isBorrowed = 0;
        printf("Book returned successfully!\n");
    }
}

// Delete a book
void deleteBook() {
    int id;
    printf("Enter Book ID to delete: ");
    scanf("%d", &id);
    int index = findBookById(id);

    if (index == -1) {
        printf("Book not found.\n");
        return;
    }
    for (int i = index; i < bookCount - 1; i++) {
        library[i] = library[i + 1];
    }
    bookCount--;
    printf("Book deleted successfully!\n");
}

// Find a book by ID
int findBookById(int id) {
    for (int i = 0; i < bookCount; i++) {
        if (library[i].id == id) {
            return i;
        }
    }
    return -1;
}
